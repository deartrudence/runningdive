{% assign page = pages.frontpage %}

{% assign collection = collections.frontpage %}
<div class="index-collection clearfix container--flex">
  {% comment %}<h2>{{ collection.title }}</h2>{% endcomment %}
    {% for product in collection.products | limit:6 %}
      {% assign index = forloop.index %}
      {% if index == 1 or index == 6 %}
          <div class="col--two-thirds tall center" style="background-image: url({{ product.featured_image.src | product_img_url: 'large' }}); background-repeat: no-repeat;  background-position: center; background-size: cover;" data-adaptive-background data-ab-css-background>
            <a href="{{ product.url | within: collection}}">
            <div class="overlay hidden">
              <div class="content">
                <h3>{{ product.title }}</h3>
                <p>{{ product.price | money }}</p>
              </div>
            </div>
            </a>
          </div>
      {% else %}
      {% cycle 'section-group-start': '<div class="col--three">', '' %}
      <a href="{{ product.url | within: collection }}">
        <div class="col span_1_of_3 green short center" style="background-image: url({{ product.featured_image.src | product_img_url: 'medium' }}); background-repeat: no-repeat;  background-position: center; background-size: cover;" data-adaptive-background data-ab-css-background>
          <div class="overlay hidden">
            <div class="content">
              <h3>{{ product.title }}</h3>
              <p>{{ product.price | money }}</p>
            </div>
          </div>
        </div>
      </a>

      {% cycle 'section-group-end': '', '</div>' %}
      {% endif %}
      {% comment %}{% include 'product-loop' %}{% endcomment %}
    {% endfor %}
</div>

<script>

  /* jshint debug: true, expr: true */

  ;(function($){

    /* Constants & defaults. */
    var DATA_COLOR    = 'data-ab-color';
    var DATA_PARENT   = 'data-ab-parent';
    var DATA_CSS_BG   = 'data-ab-css-background';
    var EVENT_CF      = 'ab-color-found';

    var DEFAULTS      = {
      selector:             '[data-adaptive-background]',
      parent:               null,
      exclude:              [ 'rgb(0,0,0)', 'rgba(255,255,255)' ],
      normalizeTextColor:   false,
      normalizedTextColors:  {
        light:      "#fff",
        dark:       "#000"
      },
      lumaClasses:  {
        light:      "ab-light",
        dark:       "ab-dark"
      }
    };

    // Include RGBaster - https://github.com/briangonzalez/rgbaster.js
    /* jshint ignore:start */
    !function(n){"use strict";var t=function(){return document.createElement("canvas").getContext("2d")},e=function(n,e){var a=new Image,o=n.src||n;"data:"!==o.substring(0,5)&&(a.crossOrigin="Anonymous"),a.onload=function(){var n=t("2d");n.drawImage(a,0,0);var o=n.getImageData(0,0,a.width,a.height);e&&e(o.data)},a.src=o},a=function(n){return["rgb(",n,")"].join("")},o=function(n){return n.map(function(n){return a(n.name)})},r=5,i=10,c={};c.colors=function(n,t){t=t||{};var c=t.exclude||[],u=t.paletteSize||i;e(n,function(e){for(var i=n.width*n.height||e.length,m={},s="",d=[],f={dominant:{name:"",count:0},palette:Array.apply(null,new Array(u)).map(Boolean).map(function(){return{name:"0,0,0",count:0}})},l=0;i>l;){if(d[0]=e[l],d[1]=e[l+1],d[2]=e[l+2],s=d.join(","),m[s]=s in m?m[s]+1:1,-1===c.indexOf(a(s))){var g=m[s];g>f.dominant.count?(f.dominant.name=s,f.dominant.count=g):f.palette.some(function(n){return g>n.count?(n.name=s,n.count=g,!0):void 0})}l+=4*r}if(t.success){var p=o(f.palette);t.success({dominant:a(f.dominant.name),secondary:p[0],palette:p})}})},n.RGBaster=n.RGBaster||c}(window);
    /* jshint ignore:end */


    /*
      Our main function declaration.
    */
    function rgb2hex(rgb){
     rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
     return (rgb && rgb.length === 4) ? "#" +
      ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
      ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
      ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';
    }
    $.adaptiveBackground = {
      run: function( options ){
        var opts = $.extend({}, DEFAULTS, options);

        /* Loop over each element, waiting for it to load
           then finding its color, and triggering the
           color found event when color has been found.
        */
        $( opts.selector ).each(function(index, el){
          var $this = $(this);

          /*  Small helper functions which applies
              colors, attrs, triggers events, etc.
          */
          var handleColors = function () {
            var img = useCSSBackground() ? getCSSBackground() : $this[0];

            RGBaster.colors(img, {
              paletteSize: 20,
              exclude: opts.exclude,
              success: function(colors) {
                $this.attr(DATA_COLOR, colors.dominant);
                $this.trigger(EVENT_CF, { color: colors.dominant, palette: colors.palette });
              }
            });

          };

          var useCSSBackground = function(){
            var attr = $this.attr( DATA_CSS_BG );
            return (typeof attr !== typeof undefined && attr !== false);
          };

          var getCSSBackground = function(){
            var str = $this.css('background-image');
            var regex = /\(([^)]+)\)/;
            var match = regex.exec(str)[1].replace(/"/g, '')
            return match;
          };

          /* Subscribe to our color-found event. */
          $this.on( EVENT_CF, function(ev, data){
            var hex = rgb2hex(data.color)
            hex = hex.substr(1)
            console.log(hex)
            var decimal = parseInt(hex, 16);
            console.log(decimal)
            
            // Try to find the parent.
            var $parent;
            if ( opts.parent && $this.parents( opts.parent ).length ) {
              $parent = $this.parents( opts.parent );
            }
            else if ( $this.attr( DATA_PARENT ) && $this.parents( $this.attr( DATA_PARENT ) ).length ){
              $parent = $this.parents( $this.attr( DATA_PARENT ) );
            }
            else if ( useCSSBackground() ){
              $parent = $this.find('.overlay');
              if(decimal < (16777215 / 2)){
                $parent.addClass('dark')
              }else{
                $parent.addClass('light')
              }
              
            }
            else if (opts.parent) {
              $parent = $this.parents( opts.parent );
            }
            else {
              $parent = $this.parent();
            }

            $parent.css({ backgroundColor: data.color});

            // Helper function to calculate yiq - http://en.wikipedia.org/wiki/YIQ
            var getYIQ = function(color){
              var rgb = data.color.match(/\d+/g);
              return ((rgb[0]*299)+(rgb[1]*587)+(rgb[2]*114))/1000;
            };

            var getNormalizedTextColor = function (color){
              return getYIQ(color) >= 128 ? opts.normalizedTextColors.dark : opts.normalizedTextColors.light;
            };

            var getLumaClass = function (color){
              return getYIQ(color) <= 128 ? opts.lumaClasses.dark : opts.lumaClasses.light;
            };

            // Normalize the text color based on luminance.
            if ( opts.normalizeTextColor )
              $parent.css({ color: getNormalizedTextColor(data.color) });

            // Add a class based on luminance.
            $parent.addClass( getLumaClass(data.color) )
                   .attr('data-ab-yaq', getYIQ(data.color));

            opts.success && opts.success($this, data);
          });

          /* Handle the colors. */
          handleColors();

        });
      },
    };

  })(jQuery);

  $(document).ready(function(){
    $.adaptiveBackground.run();
    $('.col--two-thirds, .col').on('mouseenter', function(){
      $(this).find('.overlay').fadeIn(200).removeClass('hidden')
    })
    $('.col--two-thirds, .col').on('mouseleave', function(){
      $(this).find('.overlay').fadeOut(200).addClass('hidden')
    })
  });
</script>